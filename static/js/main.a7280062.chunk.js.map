{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["App","useState","milesToAdd","setMilesToAdd","totalMiles","setTotalMiles","pushupsToAdd","setPushupsToAdd","totalPushups","setTotalPushups","pullupsToAdd","setPullupsToAdd","totalPullups","setTotalPullups","numberYouShouldHaveByToday","goal","daysThisYear","year","Date","getFullYear","getDate","isLeapYear","numberPerDay","date","UTC","getMonth","daysIntoYear","toFixed","useEffect","localStorage","getItem","parseFloat","className","onSubmit","newMiles","setItem","toString","type","name","onChange","event","currentTarget","value","newPushups","newPullups","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a7280062.chunk.js","sourcesContent":["import React, { useState, useEffect, ChangeEvent } from 'react';\nimport './App.css';\n\nfunction App() {\n\n  const [milesToAdd, setMilesToAdd] = useState(0);\n  const [totalMiles, setTotalMiles] = useState(0);\n\n  const [pushupsToAdd, setPushupsToAdd] = useState(0);\n  const [totalPushups, setTotalPushups] = useState(0);\n\n  const [pullupsToAdd, setPullupsToAdd] = useState(0);\n  const [totalPullups, setTotalPullups] = useState(0);\n\n  useEffect(() => {\n    const totalMiles = localStorage.getItem('totalMiles');\n    totalMiles === null ? setTotalMiles(0) : setTotalMiles(parseFloat(totalMiles));\n\n    const totalPushups = localStorage.getItem('totalPushups');\n    totalPushups === null ? setTotalPushups(0) : setTotalPushups(parseFloat(totalPushups));\n\n    const totalPullups = localStorage.getItem('totalPullups');\n    totalPullups === null ? setTotalPullups(0) : setTotalPullups(parseFloat(totalPullups));\n  }, []);\n\n  function isLeapYear() {\n    var date = new Date();\n    var year = date.getFullYear();\n    var result = new Date(year, 1, 29).getDate() === 29;\n    return result;\n  }\n\n  function daysIntoYear() {\n    var date = new Date();\n    var result =\n      (Date.UTC(date.getFullYear(), date.getMonth(), date.getDate()) -\n        Date.UTC(date.getFullYear(), 0, 0)) /\n      24 /\n      60 /\n      60 /\n      1000;\n    return result;\n  }\n\n  function numberYouShouldHaveByToday(goal: number) {\n    var daysThisYear = 365;\n    if (isLeapYear()) {\n      daysThisYear = 366;\n    }\n    var numberPerDay = goal / daysThisYear;\n    var result = daysIntoYear() * numberPerDay;\n    return result.toFixed(2);\n  }\n\n  const addMilesChangeHandler = (event: ChangeEvent<HTMLInputElement>) => {\n    setMilesToAdd(parseFloat(event.currentTarget.value));\n  }\n\n  const addMilesHandler = () => {\n    var newMiles = totalMiles + milesToAdd;\n    setTotalMiles(newMiles);\n    localStorage.setItem('totalMiles', newMiles.toString());\n  }\n\n  const addPushupsChangeHandler = (event: ChangeEvent<HTMLInputElement>) => {\n    setPushupsToAdd(parseFloat(event.currentTarget.value));\n  }\n\n  const addPushupsHandler = () => {\n    var newPushups = totalPushups + pushupsToAdd;\n    setTotalPushups(newPushups);\n    localStorage.setItem('totalPushups', newPushups.toString());\n  }\n\n  const addPullupsChangeHandler = (event: ChangeEvent<HTMLInputElement>) => {\n    setPullupsToAdd(parseFloat(event.currentTarget.value));\n  }\n\n  const addPullupsHandler = () => {\n    var newPullups = totalPullups + pullupsToAdd;\n    setTotalPullups(newPullups);\n    localStorage.setItem('totalPullups', newPullups.toString());\n  }\n\n  return (\n    <div className=\"App\">\n      <div className=\"Row\">\n        <text className=\"statuslabel\">500 mile:</text>\n        <text className=\"status\"> {totalMiles} of {numberYouShouldHaveByToday(500)}</text>\n      </div>\n      <div className=\"Row\">\n        <form className=\"inputsubmit\" onSubmit={addMilesHandler}>\n          <label className=\"statuslabel\">\n            <input className=\"input\" type=\"text\" name=\"miles\" onChange={addMilesChangeHandler} />\n          </label>\n          <input className=\"submit\" type=\"submit\" value=\"Add\" />\n        </form>\n      </div>\n      <div className=\"Row\">\n        <text className=\"statuslabel\">30,000 Push-Ups:</text>\n        <text className=\"status\"> {totalPushups} of {numberYouShouldHaveByToday(30000)}</text>\n      </div>\n      <div className=\"Row\">\n        <form className=\"inputsubmit\" onSubmit={addPushupsHandler}>\n          <label className=\"statuslabel\">\n            <input className=\"input\" type=\"text\" name=\"pushups\" onChange={addPushupsChangeHandler} />\n          </label>\n          <input className=\"submit\" type=\"submit\" value=\"Add\" />\n        </form>\n      </div>\n      <div className=\"Row\">\n        <text className=\"statuslabel\">3,000 Pull-Ups:</text>\n        <text className=\"status\"> {totalPullups} of {numberYouShouldHaveByToday(3000)}</text>\n      </div>\n      <div className=\"Row\">\n        <form className=\"inputsubmit\" onSubmit={addPullupsHandler}>\n          <label className=\"statuslabel\">\n            <input className=\"input\" type=\"text\" name=\"pullups\" onChange={addPullupsChangeHandler} />\n          </label>\n          <input className=\"submit\" type=\"submit\" value=\"Add\" />\n        </form>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}